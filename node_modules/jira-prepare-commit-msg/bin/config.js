"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadConfig = void 0;
const cosmiconfig_1 = require("cosmiconfig");
const log_1 = require("./log");
const defaultConfig = {
    allowEmptyCommitMessage: false,
    allowReplaceAllOccurrences: true,
    commentChar: '#',
    gitRoot: '',
    ignoredBranchesPattern: '^(master|main|dev|develop|development|release)$',
    ignoreBranchesMissingTickets: false,
    isConventionalCommit: false,
    conventionalCommitPattern: '^([a-z]+)(\\([a-z0-9.,-_ ]+\\))?!?: ([\\w \\S]+)$',
    jiraTicketPattern: '([A-Z]+-\\d+)',
    messagePattern: '[$J] $M',
};
function resolveConfig(configPath) {
    try {
        return require.resolve(configPath);
    }
    catch (_a) {
        return configPath;
    }
}
async function loadConfig(configPath) {
    try {
        const explorer = (0, cosmiconfig_1.cosmiconfig)('jira-prepare-commit-msg', {
            searchPlaces: [
                'package.json',
                '.jirapreparecommitmsgrc',
                '.jirapreparecommitmsgrc.json',
                '.jirapreparecommitmsgrc.yaml',
                '.jirapreparecommitmsgrc.yml',
                'jira-prepare-commit-msg.config.js',
            ],
        });
        const config = configPath ? await explorer.load(resolveConfig(configPath)) : await explorer.search();
        (0, log_1.debug)(`Loaded config: ${JSON.stringify(config)}`);
        if (config && !config.isEmpty) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const result = Object.assign(Object.assign({}, defaultConfig), config.config);
            (0, log_1.debug)(`Used config: ${JSON.stringify(result)}`);
            return result;
        }
    }
    catch (err) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        (0, log_1.error)(`Loading configuration failed with error: ${err}`);
    }
    const result = Object.assign({}, defaultConfig);
    (0, log_1.debug)(`Used config: ${JSON.stringify(result)}`);
    return result;
}
exports.loadConfig = loadConfig;
