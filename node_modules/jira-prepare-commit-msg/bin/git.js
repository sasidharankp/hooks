"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeJiraTicket = exports.getJiraTicket = exports.getBranchName = exports.getRoot = exports.gitRevParse = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const cp = __importStar(require("child_process"));
const log_1 = require("./log");
const gitVerboseStatusSeparator = '------------------------ >8 ------------------------';
function getMsgFilePath(gitRoot, index = 0) {
    (0, log_1.debug)('getMsgFilePath');
    if (gitRoot.length > 0) {
        // At first looking into this path, then if it's empty trying other ways
        if (!path.isAbsolute(gitRoot)) {
            const cwd = process.cwd();
            (0, log_1.log)(`Resolving .git path from ${cwd}`);
            gitRoot = path.resolve(cwd, gitRoot);
        }
        if (!gitRoot.includes('.git')) {
            gitRoot = path.join(gitRoot, '.git');
        }
        return path.join(gitRoot, 'COMMIT_EDITMSG');
    }
    // It is Husky 5
    if (process.env.HUSKY_GIT_PARAMS === undefined) {
        const messageFilePath = process.argv.find((arg) => arg.includes('.git'));
        if (messageFilePath) {
            return messageFilePath;
        }
        else {
            throw new Error(`You are using Husky 5. Please add $1 to jira-pre-commit-msg's parameters.`);
        }
    }
    // Husky 2-4 stashes git hook parameters $* into a HUSKY_GIT_PARAMS env var.
    const gitParams = process.env.HUSKY_GIT_PARAMS || '';
    // Throw a friendly error if the git params environment variable can't be found â€“ the user may be missing Husky.
    if (!gitParams) {
        throw new Error(`The process.env.HUSKY_GIT_PARAMS isn't set. Is supported Husky version installed?`);
    }
    // Unfortunately, this will break if there are escaped spaces within a single argument;
    // I don't believe there's a workaround for this without modifying Husky itself
    return gitParams.split(' ')[index];
}
function escapeReplacement(str) {
    return str.replace(/[$]/, '$$$$'); // In replacement to escape $ needs $$
}
function replaceMessageByPattern(jiraTicket, message, pattern, replaceAll) {
    const jiraTicketRegExp = new RegExp('\\$J', replaceAll ? 'g' : '');
    const messageRegExp = new RegExp('\\$M', replaceAll ? 'g' : '');
    const result = pattern
        .replace(jiraTicketRegExp, escapeReplacement(jiraTicket))
        .replace(messageRegExp, escapeReplacement(message));
    (0, log_1.debug)(`Replacing message: ${result}`);
    return result;
}
function getMessageInfo(message, config) {
    (0, log_1.debug)(`Original commit message: ${message}`);
    const messageSections = message.split(gitVerboseStatusSeparator)[0];
    const lines = messageSections
        .trim()
        .split('\n')
        .map((line) => line.trimLeft())
        .filter((line) => !line.startsWith(config.commentChar));
    const cleanMessage = lines.join('\n').trim();
    (0, log_1.debug)(`Clean commit message (${cleanMessage.length}): ${cleanMessage}`);
    return {
        cleanMessage,
        originalMessage: message,
        hasAnyText: message.length !== 0,
        hasUserText: cleanMessage.length !== 0,
        hasVerboseText: message.includes(gitVerboseStatusSeparator),
    };
}
function findFirstLineToInsert(lines, config) {
    let firstNotEmptyLine = -1;
    for (let i = 0; i < lines.length; ++i) {
        const line = lines[i];
        // ignore everything after commentChar or the scissors comment, which present when doing a --verbose commit,
        // or `git config commit.status true`
        if (line === gitVerboseStatusSeparator) {
            break;
        }
        if (line.startsWith(config.commentChar)) {
            continue;
        }
        if (firstNotEmptyLine === -1) {
            firstNotEmptyLine = i;
            break;
        }
    }
    return firstNotEmptyLine;
}
function insertJiraTicketIntoMessage(messageInfo, jiraTicket, config) {
    var _a;
    const message = messageInfo.originalMessage;
    const lines = message.split('\n').map((line) => line.trimLeft());
    if (!messageInfo.hasUserText) {
        (0, log_1.debug)(`User didn't write the message. Allow empty commit is ${String(config.allowEmptyCommitMessage)}`);
        const preparedMessage = replaceMessageByPattern(jiraTicket, '', config.messagePattern, config.allowReplaceAllOccurrences);
        if (messageInfo.hasAnyText) {
            const insertedMessage = config.allowEmptyCommitMessage
                ? preparedMessage
                : `# ${preparedMessage}\n` +
                    '# JIRA prepare commit msg > ' +
                    'Please uncomment the line above if you want to insert JIRA ticket into commit message';
            lines.unshift(insertedMessage);
        }
        else {
            if (config.allowEmptyCommitMessage) {
                lines.unshift(preparedMessage);
            }
            else {
                (0, log_1.debug)(`Commit message is empty. Skipping...`);
            }
        }
    }
    else {
        const firstLineToInsert = findFirstLineToInsert(lines, config);
        (0, log_1.debug)(`First line to insert is: ${firstLineToInsert > -1 ? lines[firstLineToInsert] : ''} (${firstLineToInsert})`);
        if (firstLineToInsert !== -1) {
            const line = lines[firstLineToInsert];
            if (config.isConventionalCommit) {
                (0, log_1.debug)(`Finding conventional commit in: ${line}`);
                const conventionalCommitRegExp = new RegExp(config.conventionalCommitPattern, 'g');
                conventionalCommitRegExp.lastIndex = -1;
                const [match, type, scope, msg] = (_a = conventionalCommitRegExp.exec(line)) !== null && _a !== void 0 ? _a : [];
                if (match) {
                    (0, log_1.debug)(`Conventional commit message: ${match}`);
                    if (!msg.includes(jiraTicket)) {
                        const replacedMessage = replaceMessageByPattern(jiraTicket, msg, config.messagePattern, config.allowReplaceAllOccurrences);
                        lines[firstLineToInsert] = `${type}${scope || ''}: ${replacedMessage}`;
                    }
                }
            }
            else if (!line.includes(jiraTicket)) {
                lines[firstLineToInsert] = replaceMessageByPattern(jiraTicket, line || '', config.messagePattern, config.allowReplaceAllOccurrences);
            }
        }
        // Add jira ticket into the message in case of missing
        if (lines.every((line) => !line.includes(jiraTicket))) {
            lines[0] = replaceMessageByPattern(jiraTicket, lines[0] || '', config.messagePattern, config.allowReplaceAllOccurrences);
        }
    }
    return lines.join('\n');
}
function gitRevParse(cwd = process.cwd(), gitRoot = '') {
    const args = [];
    // If git root is specified, checking existing work tree
    if (gitRoot !== '' && gitRoot !== '.') {
        (0, log_1.log)(`Git root is specified as ${gitRoot}`);
        args.push('--git-dir', gitRoot);
    }
    args.push('rev-parse', '--show-prefix', '--git-common-dir');
    // https://github.com/typicode/husky/issues/580
    // https://github.com/typicode/husky/issues/587
    const { status, stderr, stdout } = cp.spawnSync('git', args, { cwd, encoding: 'utf-8' });
    if (status !== 0) {
        throw new Error(stderr.toString());
    }
    const [prefix, gitCommonDir] = stdout
        .toString()
        .split('\n')
        .map((s) => s.trim())
        // Normalize for Windows
        .map((s) => s.replace(/\\\\/, '/'));
    return { prefix, gitCommonDir };
}
exports.gitRevParse = gitRevParse;
function getRoot(gitRoot) {
    (0, log_1.debug)('getRoot');
    const cwd = process.cwd();
    const { gitCommonDir } = gitRevParse(cwd, gitRoot);
    // Git rev-parse returns unknown options as is.
    // If we get --absolute-git-dir in the output,
    // it probably means that an old version of Git has been used.
    // There seem to be a bug with --git-common-dir that was fixed in 2.13.0.
    // See issues above.
    if (gitCommonDir === '--git-common-dir') {
        throw new Error('Husky requires Git >= 2.13.0, please upgrade Git');
    }
    return path.resolve(cwd, gitCommonDir);
}
exports.getRoot = getRoot;
function getBranchName(gitRoot) {
    (0, log_1.debug)('gitBranchName');
    const cwd = process.cwd();
    const args = [];
    // If git root is specified, checking existing work tree
    if (gitRoot !== '' && gitRoot !== '.') {
        args.push('--git-dir', gitRoot);
    }
    args.push('symbolic-ref', '--short', 'HEAD');
    const { status, stderr, stdout } = cp.spawnSync('git', args, { cwd, encoding: 'utf-8' });
    if (status !== 0) {
        throw new Error(stderr.toString());
    }
    return stdout.toString().trim();
}
exports.getBranchName = getBranchName;
function getJiraTicket(branchName, config) {
    (0, log_1.debug)('getJiraTicket');
    const jiraIdPattern = new RegExp(config.jiraTicketPattern, 'i');
    const matched = jiraIdPattern.exec(branchName);
    const jiraTicket = matched && matched[0];
    return jiraTicket ? jiraTicket.toUpperCase() : null;
}
exports.getJiraTicket = getJiraTicket;
function writeJiraTicket(jiraTicket, config) {
    (0, log_1.debug)('writeJiraTicket');
    const messageFilePath = getMsgFilePath(config.gitRoot);
    let message;
    // Read file with commit message
    try {
        message = fs.readFileSync(messageFilePath, { encoding: 'utf-8' });
    }
    catch (ex) {
        throw new Error(`Unable to read the file "${messageFilePath}".`);
    }
    const messageInfo = getMessageInfo(message, config);
    const messageWithJiraTicket = insertJiraTicketIntoMessage(messageInfo, jiraTicket, config);
    (0, log_1.debug)(messageWithJiraTicket);
    // Write message back to file
    try {
        fs.writeFileSync(messageFilePath, messageWithJiraTicket, { encoding: 'utf-8' });
    }
    catch (ex) {
        throw new Error(`Unable to write the file "${messageFilePath}".`);
    }
}
exports.writeJiraTicket = writeJiraTicket;
