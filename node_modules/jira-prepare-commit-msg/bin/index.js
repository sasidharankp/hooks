#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const git = __importStar(require("./git"));
const config_1 = require("./config");
const log_1 = require("./log");
// eslint-disable-next-line @typescript-eslint/no-floating-promises
(async () => {
    (0, log_1.log)('start');
    try {
        const config = await (0, config_1.loadConfig)();
        const gitRoot = git.getRoot(config.gitRoot);
        const branch = git.getBranchName(gitRoot);
        const ignored = new RegExp(config.ignoredBranchesPattern || '^$', 'i');
        if (ignored.test(branch)) {
            (0, log_1.log)('The branch is ignored by the configuration rule');
            return;
        }
        const ticket = git.getJiraTicket(branch, config);
        if (ticket === null) {
            if (config.ignoreBranchesMissingTickets) {
                (0, log_1.log)('The branch does not contain a JIRA ticket and is ignored by the configuration rule');
            }
            else {
                (0, log_1.error)('The JIRA ticket ID not found');
            }
            return;
        }
        (0, log_1.log)(`The JIRA ticket ID is: ${ticket}`);
        git.writeJiraTicket(ticket, config);
    }
    catch (err) {
        if (typeof err === 'string') {
            (0, log_1.error)(err);
        }
        else {
            (0, log_1.error)(String(err));
        }
    }
    (0, log_1.log)('done');
})();
